{"version":3,"sources":["components/Header.js","components/LinearRegression.js","components/MobileNet.js","components/Navbar.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","header","textAlign","padding","Header","name","classes","Fragment","Box","className","Typography","variant","color","Divider","LinearRegression","useState","x","y","valuePairsState","setValuePairsState","model","trained","predictedValue","loading","valueToPredict","modelState","setModelState","handleValuePairChange","e","updatedValuePairs","update","target","dataset","index","$set","parseInt","value","map","val","key","Input","data-index","onChange","type","Button","onClick","startIcon","Icon","slice","length","xValues","yValues","forEach","push","tf","add","dense","units","inputShape","compile","loss","optimizer","xs","ys","fit","epochs","then","placeholder","height","width","predict","arraySync","disabled","MobileNet","net","webcam","clsImage","setClsImage","clsVideo","setClsVideo","videoStream","useEffect","setUpInterface","console","log","a","mn","loadWebCam","loadMobileNet","webcamElement","document","getElementById","videoClassification","classifyImage","imgEl","classify","results","capture","img","r","dispose","sleep","ms","Promise","res","setTimeout","autoPlay","playsInline","muted","id","probability","toFixed","src","process","alt","ResultCard","showProbability","setShowProbability","React","Card","CardContent","root","flexGrow","logo","fontWeight","backgroundColor","textDecoration","navRight","display","justifyContent","item","link","letterSpacing","menuButton","position","right","mobileItemLink","StyledMenu","withStyles","paper","border","props","Menu","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","palette","primary","main","common","white","MenuItem","Navbar","anchorEl","setAnchorEl","isOpen","setIsOpen","handleClose","useMediaQuery","AppBar","title","Toolbar","to","IconButton","aria-label","event","currentTarget","keepMounted","open","onClose","ListItemIcon","fontSize","ListItemText","About","Link","href","App","path","Boolean","window","location","hostname","match","ReactDOM","render","CssBaseline","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qdAKMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNC,UAAW,SACXC,QAAS,iBAqBEC,EAhBA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAERC,EAAUR,IAEhB,OACE,kBAAC,IAAMS,SAAP,KACE,kBAACC,EAAA,EAAD,CAAKC,UAAWH,EAAQL,QACpB,kBAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,WAC5BP,IAGP,kBAACQ,EAAA,EAAD,Q,oCCsMOC,EApNU,WAAM,MAEmBC,mBAAS,CACnD,CAAEC,GAAI,EAAGC,GAAI,GACb,CAAED,EAAG,EAAGC,GAAI,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,KARY,mBAEpBC,EAFoB,KAEHC,EAFG,OAYSJ,mBAAS,CACzCK,MAAO,KACPC,SAAS,EACTC,eAAgB,kBAChBC,SAAS,EACTC,eAAgB,IAjBO,mBAYpBC,EAZoB,KAYRC,EAZQ,KAqBrBC,EAAwB,SAACC,GAC3B,IAAMC,EAAoBC,IAAOZ,EAAD,eAC3BU,EAAEG,OAAOC,QAAQC,MADU,eAEvBL,EAAEG,OAAO1B,KAAO,CAAE6B,KAAMC,SAASP,EAAEG,OAAOK,WAInDjB,EACIU,IAuER,OACI,kBAAC,IAAMtB,SAAP,KACI,kBAAC,EAAD,CAAQF,KAAK,sBACb,kBAACG,EAAA,EAAD,CAAKC,UAAU,qBACX,kBAACD,EAAA,EAAD,CAAKC,UAAU,kBACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,qBACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,YAAYF,UAAU,WAA1C,6BACA,kBAACD,EAAA,EAAD,CAAKC,UAAU,cACX,kBAACD,EAAA,EAAD,CAAKC,UAAU,sBACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,MAIJ,kBAACH,EAAA,EAAD,CAAKC,UAAU,sBACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,OAMPO,EAAgBmB,KAAI,SAACC,EAAKL,GACvB,OACI,kBAACzB,EAAA,EAAD,CAAK+B,IAAKN,EAAOxB,UAAU,OACvB,kBAAC+B,EAAA,EAAD,CACI/B,UAAU,uBACV2B,MAAOE,EAAItB,EACXX,KAAK,IACLoC,aAAYR,EACZS,SAAUf,EACVgB,KAAK,WAET,kBAACH,EAAA,EAAD,CACI/B,UAAU,uBACV2B,MAAOE,EAAIrB,EACXZ,KAAK,IACLoC,aAAYR,EACZS,SAAUf,EACVgB,KAAK,eAKrB,kBAACC,EAAA,EAAD,CACIjC,QAAQ,YACRC,MAAM,UACNiC,QAhHE,WAClB1B,EAAmB,GAAD,mBACXD,GADW,CAEd,CAAEF,EAAG,EAAGC,EAAG,OA8GC6B,UAAW,kBAACC,EAAA,EAAD,aACP,kBAACrC,EAAA,EAAD,CAAYC,QAAQ,UAApB,mBAIR,kBAACiC,EAAA,EAAD,CACIjC,QAAQ,YACRC,MAAM,UACNiC,QAlHK,WACrB1B,EAAmB,YACZD,EAAgB8B,MAAM,EAAE9B,EAAgB+B,OAAO,MAiHtCH,UAAW,kBAACC,EAAA,EAAD,gBACP,kBAACrC,EAAA,EAAD,CAAYC,QAAQ,UAApB,qBAIR,kBAACiC,EAAA,EAAD,CACIjC,QAAQ,YACRC,MAAM,UACNiC,QAhHK,WAGrBnB,EAAc,2BACPD,GADM,IAETF,SAAS,KAGb,IAAI2B,EAAU,GACVC,EAAU,GAEdjC,EAAgBkC,SAAQ,SAACd,EAAKL,GAC1BiB,EAAQG,KAAKf,EAAItB,GACjBmC,EAAQE,KAAKf,EAAIrB,MAIrB,IAAMG,EAAQkC,MACdlC,EAAMmC,IAAID,IAAUE,MAAM,CAAEC,MAAO,EAAGC,WAAY,CAAC,MAGnDtC,EAAMuC,QAAQ,CAAEC,KAAM,mBAAoBC,UAAW,QACrD,IAAMC,EAAKR,IAAYJ,EAAS,CAACA,EAAQD,OAAQ,IAC3Cc,EAAKT,IAAYH,EAAS,CAACA,EAAQF,OAAQ,IAGjD7B,EAAM4C,IAAIF,EAAIC,EAAI,CAAEE,OAAQ,MAAOC,MAAK,WACpCxC,EAAc,2BACPD,GADM,IAETL,MAAOA,EACPC,SAAS,EACTC,eAAgB,+BAChBC,SAAS,SAiFDuB,UAAW,kBAACC,EAAA,EAAD,sBACX,kBAACrC,EAAA,EAAD,CAAYC,QAAQ,UAApB,WAMR,kBAACH,EAAA,EAAD,CAAKC,UAAU,oBACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,cACA,kBAAC6B,EAAA,EAAD,CACI/B,UAAU,gBACV2B,MAAOX,EAAWD,eAClBnB,KAAK,iBACLqC,SAnIM,SAACd,GAAD,OAAOF,EAAc,2BACxCD,GADuC,kBAEzCG,EAAEG,OAAO1B,KAAO,CAAC8B,SAASP,EAAEG,OAAOK,YAkIpBO,KAAK,SACLwB,YAAY,qBAAqB,6BACrC,kBAAC3D,EAAA,EAAD,CAAKC,UAAU,4BAGPgB,EAAWF,QACP,kBAAC,IAAD,CACAd,UAAU,SACVkC,KAAK,OACL/B,MAAM,UACNwD,OAAQ,GACRC,MAAO,KAGP,kBAAC3D,EAAA,EAAD,CAAYC,QAAQ,MACfc,EAAWH,iBAI5B,kBAACsB,EAAA,EAAD,CACIjC,QAAQ,YACRC,MAAM,YACNiC,QA/GE,WAElB,IAAMvB,EAAiBG,EAAWL,MAAMkD,QAAQhB,IAAY,CAAC7B,EAAWD,gBAAiB,CAAC,EAAG,KACxF+C,YAAY,GAAG,GAEpB7C,EAAc,2BACPD,GADM,IAETH,eAAgBA,MAyGJkD,UAAW/C,EAAWJ,SACtB,kBAACX,EAAA,EAAD,CAAYC,QAAQ,UAApB,gB,mDCNT8D,G,OApLG,WAAM,IAsChBC,EACAC,EAvCgB,EAaY5D,mBAAS,IAbrB,mBAab6D,EAba,KAaHC,EAbG,OAcY9D,mBAAS,IAdrB,mBAcb+D,EAda,KAcHC,EAdG,OAekBhE,oBAAS,GAf3B,mBAebiE,EAfa,UA8BpBC,qBAAU,WAEN,OADAC,IACO,kBAAMC,QAAQC,IAAI,iBAC1B,IASH,IAAMF,EAAiB,WAAM,4CASzB,sBAAAG,EAAA,sEACgBC,MADhB,OACIZ,EADJ,OAEIS,QAAQC,IAAI,8BAEZG,IAJJ,4CATyB,0DAgBzBC,IA1DgB,SA8DLD,IA9DK,2EA8DpB,4BAAAF,EAAA,6DACUI,EAAgBC,SAASC,eAAe,UADlD,SAEmBrC,IAAQqB,OAAOc,GAFlC,OAEId,EAFJ,OAGIQ,QAAQC,IAAI,qBAEZQ,GAAoB,GACpBC,IANJ,4CA9DoB,+BAwELA,IAxEK,2EAwEpB,8BAAAR,EAAA,6DACUS,EAAQJ,SAASC,eAAe,SAD1C,SAE0BjB,EAAIqB,SAASD,GAFvC,OAEUE,EAFV,OAGInB,EAAYmB,GAHhB,4CAxEoB,+BA+ELJ,IA/EK,2EA+EpB,4BAAAP,EAAA,0DACUL,EADV,iCAE0BL,EAAOsB,UAFjC,cAEcC,EAFd,gBAG6BxB,EAAIqB,SAASG,GAH1C,qBASe7D,KAAI,SAAA8D,GAAC,OAAIpB,GAAY,SAAAD,GAAQ,4BAAQA,GAAR,CAAkBqB,UAGtDD,EAAIE,UAZZ,UAgBcC,EAAM,KAhBpB,yBAiBc/C,MAjBd,oEA/EoB,sBAoGpB,IAAM+C,EAAQ,SAAAC,GAAE,OAAI,IAAIC,SAAQ,SAAAC,GAAG,OAAIC,WAAWD,EAAKF,OAEvD,OACI,kBAAC,IAAM/F,SAAP,KACI,kBAAC,EAAD,CAAQF,KAAK,uBACb,kBAACG,EAAA,EAAD,CAAKC,UAAU,cACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,aACA,kBAACH,EAAA,EAAD,CAAKC,UAAU,wBACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,8BACA,2BAAO+F,UAAQ,EAACC,aAAW,EAACC,OAAK,EAACC,GAAG,SAASxC,MAAM,MAAMD,OAAO,QACjE,kBAAC5D,EAAA,EAAD,KAEQsE,EAAS7B,OACT,kBAACzC,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAYC,QAAQ,SAASmE,EAASA,EAAS7B,OAAO,GAAGxC,WACzD,kBAACC,EAAA,EAAD,CAAYC,QAAQ,SAApB,MACQmE,EAASA,EAAS7B,OAAO,GAAG6D,YAAYC,QAAQ,KAI5D,kBAACvG,EAAA,EAAD,CAAKC,UAAU,kBACX,kBAAC,IAAD,CACAA,UAAU,SACVkC,KAAK,OACL/B,MAAM,UACNwD,OAAQ,IACRC,MAAO,MAEP,kBAAC3D,EAAA,EAAD,CAAYC,QAAQ,SAApB,iBAKhB,kBAACH,EAAA,EAAD,CAAKC,UAAU,wBACX,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,wBACA,yBACIkG,GAAG,QACHG,IAAKC,8BACLC,IAAI,oBACR,kBAAC1G,EAAA,EAAD,KACA,kBAACE,EAAA,EAAD,CAAYC,QAAQ,MAApB,0BAEQiE,EAAS3B,OAqBL2B,EAASvC,KAAI,SAACC,EAAKL,GAAN,OAAgB,kBAAC,EAAD,CAAYM,IAAKN,EAAOK,IAAKA,EAAI7B,UAAWqG,YAAaxE,EAAIwE,iBAE9F,kBAAC,IAAD,CACArG,UAAU,SACVkC,KAAK,YACL/B,MAAM,UACNwD,OAAQ,GACRC,MAAO,WAa7B8C,EAAa,SAAC,GAA+B,IAA9B7E,EAA6B,EAA7BA,IAAKwE,EAAwB,EAAxBA,YAAa7E,EAAW,EAAXA,MAAW,EAEAlB,oBAAS,GAFT,mBAEvCqG,EAFuC,KAEtBC,EAFsB,KAe9C,OAJAC,IAAMrC,WAAU,WACZE,QAAQC,IAAI,+BACb,CAACgC,IAGA,kBAACG,EAAA,EAAD,CAAMtF,MAAOA,GACT,kBAACuF,EAAA,EAAD,KACI,kBAAC9G,EAAA,EAAD,CAAYC,QAAQ,MACf2B,GAEL,kBAACM,EAAA,EAAD,CACKjC,QAAQ,YACRC,MAAM,UACNiC,QApBc,kBAEvBwE,GADJD,KAqBY,kBAAC1G,EAAA,EAAD,CAAYC,QAAQ,UAApB,uBAKAyG,GACA,kBAAC1G,EAAA,EAAD,CAAYC,QAAQ,aACfmG,M,gKClOnBhH,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCyH,KAAM,CACJC,SAAU,GAEZC,KAAM,CACF/G,MAAO,OACPgH,WAAY,MACZC,gBAAiB,UACjB1H,QAAS,WACT2H,eAAgB,OAChB,UAAW,CACPlH,MAAO,YAGfmH,SAAU,CACNC,QAAS,OACTC,eAAgB,WAChB5D,MAAO,SAEX6D,KAAM,CACF/H,QAAS,aAEbgI,KAAM,CACFvH,MAAO,OACPkH,eAAgB,OAChBM,cAAe,MACf,UAAW,CACPxH,MAAO,YAGfyH,WAAY,CACRC,SAAU,WACVC,MAAO,QAEXC,eAAgB,CACZV,eAAgB,YAIlBW,EAAaC,YAAW,CAC1BC,MAAO,CACLC,OAAQ,sBAFKF,EAId,SAACG,GAAD,OACD,kBAACC,EAAA,EAAD,eACEC,UAAW,EACXC,mBAAoB,KACpBC,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,WAEVN,OAMJQ,GAAiBX,aAAW,SAAC1I,GAAD,MAAY,CAC1CyH,KAAM,CACJ,UAAW,CACTI,gBAAiB7H,EAAMsJ,QAAQC,QAAQC,KACvC,sDAAuD,CACrD5I,MAAOZ,EAAMsJ,QAAQG,OAAOC,YALfhB,CASnBiB,KA8FWC,GAzFA,WAAO,IAAD,EACe7I,mBAAS,MADxB,mBACV8I,EADU,KACAC,EADA,OAEW/I,oBAAS,GAFpB,mBAEVgJ,EAFU,KAEFC,EAFE,KAIX1J,EAAUR,IAQVmK,EAAc,WAChBH,EAAY,MACZE,GAAU,IAGd,OAZsBE,YAAc,qBAe5B,yBAAKzJ,UAAWH,EAAQmH,MACpB,kBAAC0C,EAAA,EAAD,CAAQvJ,MAAM,UAAUwJ,MAAM,0BAA0B9B,SAAS,UAC7D,kBAAC+B,EAAA,EAAD,KACI,kBAAC3J,EAAA,EAAD,CAAYC,QAAQ,MAChB,kBAAC,IAAD,CAAM2J,GAAG,IAAI7J,UAAWH,EAAQqH,MAAhC,OAEJ,yBAAKlH,UAAWH,EAAQyH,UACpB,kBAACrH,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWH,EAAQ4H,MACxC,kBAAC,IAAD,CAAMoC,GAAG,IAAI7J,UAAWH,EAAQ6H,MAAhC,uBAEJ,kBAACzH,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWH,EAAQ4H,MACxC,kBAAC,IAAD,CAAMoC,GAAG,qBAAqB7J,UAAWH,EAAQ6H,MAAjD,sBAEJ,kBAACzH,EAAA,EAAD,CAAYC,QAAQ,KAAKF,UAAWH,EAAQ4H,MACxC,kBAAC,IAAD,CAAMoC,GAAG,SAAS7J,UAAWH,EAAQ6H,MAArC,cAQpB,yBAAK1H,UAAWH,EAAQmH,MACpB,kBAAC0C,EAAA,EAAD,CAAQ7B,SAAS,UACb,kBAAC+B,EAAA,EAAD,KACI,kBAAC3J,EAAA,EAAD,CAAYC,QAAQ,MAChB,kBAAC,IAAD,CAAM2J,GAAG,IAAI7J,UAAWH,EAAQqH,MAAhC,OAEJ,kBAAC4C,EAAA,EAAD,CAAY9J,UAAWH,EAAQ+H,WAAYzH,MAAM,UAAU4J,aAAW,OAAO3H,QAxC7E,SAAA4H,GAChBX,EAAYW,EAAMC,eAClBV,GAAU,KAuCU,kBAAC,IAAD,OAEJ,kBAACvB,EAAD,CACI5B,GAAG,kBACHgD,SAAUA,EACVc,aAAW,EACXC,KAAMb,EACNc,QAASZ,GAET,kBAAC,IAAD,CAAMK,GAAG,IAAIzH,QAASoH,EAAaxJ,UAAWH,EAAQkI,gBAClD,kBAACa,GAAD,KACI,kBAACyB,EAAA,EAAD,KACI,kBAAC,IAAD,CAAWC,SAAS,WAExB,kBAACC,EAAA,EAAD,CAAczB,QAAQ,yBAG9B,kBAAC,IAAD,CAAMe,GAAG,qBAAqBzH,QAASoH,EAAaxJ,UAAWH,EAAQkI,gBACnE,kBAACa,GAAD,KACI,kBAACyB,EAAA,EAAD,KACI,kBAAC,IAAD,CAAeC,SAAS,WAE5B,kBAACC,EAAA,EAAD,CAAczB,QAAQ,wBAG9B,kBAAC,IAAD,CAAMe,GAAG,SAASzH,QAASoH,EAAaxJ,UAAWH,EAAQkI,gBACvD,kBAACa,GAAD,KACI,kBAACyB,EAAA,EAAD,KACI,kBAAC,IAAD,CAAUC,SAAS,WAEvB,kBAACC,EAAA,EAAD,CAAczB,QAAQ,iB,UCrJ3C0B,GAhBD,kBACV,kBAAC,IAAM1K,SAAP,KACI,kBAAC,EAAD,CAAQF,KAAK,UACb,kBAACK,EAAA,EAAD,CAAYC,QAAQ,YAAYC,MAAM,aAAtC,4BAEQ,kBAACsK,GAAA,EAAD,CACAC,KAAK,+EACLvK,MAAM,WAFN,mBAKR,kBAACF,EAAA,EAAD,CAAYC,QAAQ,YAAYC,MAAM,aAAtC,4F,SCiBOwK,GArBH,kBACV,kBAAC5K,EAAA,EAAD,CAAKC,UAAU,OACX,kBAAC,IAAD,KACE,kBAAC,GAAD,MACA,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAO4K,KAAK,UACR,kBAAC,GAAD,OAEJ,kBAAC,KAAD,CAAOA,KAAK,sBACV,kBAAC,EAAD,OAEF,kBAAC,KAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,KACE,yDCZIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCPNC,IAASC,OAEL,kBAACC,GAAA,EAAD,KACE,kBAAC,GAAD,OAGJnG,SAASC,eAAe,SDkHpB,kBAAmBmG,WACrBA,UAAUC,cAAcC,MACrB9H,MAAK,SAAA+H,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjH,QAAQiH,MAAMA,EAAMC,c","file":"static/js/main.8f302ca0.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Box, Typography, Link, Divider } from '@material-ui/core'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  header: {\r\n    textAlign: 'center',\r\n    padding: '48px 32px'\r\n  },\r\n\r\n}))\r\n\r\nconst Header = ({ name }) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Box className={classes.header}>\r\n            <Typography variant=\"h1\" color=\"primary\">\r\n              {name}\r\n            </Typography>\r\n        </Box>\r\n        <Divider />\r\n      </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { useState } from 'react'\r\nimport update from 'immutability-helper'\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport Loader from 'react-loader-spinner'\r\nimport Header from './Header'\r\n\r\nimport './LinearRegression.css'\r\n\r\nimport { Box, Button, Typography, Input, Icon } from '@material-ui/core'\r\n\r\nconst LinearRegression = () => {\r\n    // Value pairs state\r\n    const [valuePairsState, setValuePairsState] = useState([\r\n        { x: -1, y: -3 },\r\n        { x: 0, y: -1},\r\n        { x: 1, y: 1},\r\n        { x: 2, y: 3},\r\n        { x: 3, y: 5},\r\n        { x: 4, y: 7},\r\n    ])\r\n\r\n    // Define the model state\r\n    const [modelState, setModelState] = useState({\r\n        model: null,\r\n        trained: false,\r\n        predictedValue: 'Click on train!',\r\n        loading: false,\r\n        valueToPredict: 1,\r\n    })\r\n\r\n    // Event handlers\r\n    const handleValuePairChange = (e) => {\r\n        const updatedValuePairs = update(valuePairsState, {\r\n            [e.target.dataset.index]: {\r\n                [e.target.name]: { $set: parseInt(e.target.value) }\r\n            }\r\n        })\r\n\r\n        setValuePairsState(\r\n            updatedValuePairs\r\n        )\r\n    }\r\n\r\n    const handleAddItem = () => {\r\n        setValuePairsState([\r\n            ...valuePairsState,\r\n            { x: 1, y: 1 }\r\n        ])\r\n    }\r\n\r\n    const handleDeleteItem = () => {\r\n        setValuePairsState([\r\n            ...valuePairsState.slice(0,valuePairsState.length-1)\r\n        ])\r\n    }\r\n\r\n    const handleModelChange = (e) => setModelState({\r\n        ...modelState,\r\n        [e.target.name]: [parseInt(e.target.value)],\r\n    })\r\n\r\n    const handleTrainModel = () => {\r\n\r\n        // Change the loading state.\r\n        setModelState({\r\n            ...modelState,\r\n            loading: true\r\n        })\r\n\r\n        let xValues = [],\r\n            yValues = []\r\n\r\n        valuePairsState.forEach((val, index) => {\r\n            xValues.push(val.x)\r\n            yValues.push(val.y)\r\n        })\r\n\r\n        // Define a model for linear regression.\r\n        const model = tf.sequential()\r\n        model.add(tf.layers.dense({ units: 1, inputShape: [1]}))\r\n\r\n        // Prepare the model for training: Specify the loss and the optimizer.\r\n        model.compile({ loss: 'meanSquaredError', optimizer: 'sgd' })\r\n        const xs = tf.tensor2d(xValues, [xValues.length, 1])\r\n        const ys = tf.tensor2d(yValues, [yValues.length, 1])\r\n\r\n        // Train the model using the data.\r\n        model.fit(xs, ys, { epochs: 250 }).then(() => {\r\n            setModelState({\r\n                ...modelState,\r\n                model: model,\r\n                trained: true,\r\n                predictedValue: 'Ready for making predictions',\r\n                loading: false,\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    const handlePredict = () => {\r\n        // Use the model to do inference on a data point the model has not seen before:\r\n        const predictedValue = modelState.model.predict(tf.tensor2d([modelState.valueToPredict], [1, 1]))\r\n            .arraySync()[0][0]\r\n\r\n        setModelState({\r\n            ...modelState,\r\n            predictedValue: predictedValue,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header name=\"Linear Regression\" />\r\n            <Box className=\"linear-regression\">\r\n                <Box className=\"train-controls\">\r\n                    <Typography variant=\"h2\">Linear Regression</Typography>\r\n                    <Typography variant=\"subtitle1\" className=\"section\">Training Data (x,y) pairs</Typography>\r\n                    <Box className=\"row labels\">\r\n                        <Box className=\"field-label column\">\r\n                            <Typography variant=\"h6\">\r\n                                X\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box className=\"field-label column\">\r\n                            <Typography variant=\"h6\">\r\n                                Y\r\n                            </Typography>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    {valuePairsState.map((val, index) => {\r\n                        return (\r\n                            <Box key={index} className=\"row\">\r\n                                <Input\r\n                                    className=\"field field-x column\"\r\n                                    value={val.x}\r\n                                    name=\"x\"\r\n                                    data-index={index}\r\n                                    onChange={handleValuePairChange}\r\n                                    type=\"number\" />\r\n                            \r\n                                <Input\r\n                                    className=\"field field-y column\"\r\n                                    value={val.y}\r\n                                    name=\"y\"\r\n                                    data-index={index}\r\n                                    onChange={handleValuePairChange}\r\n                                    type=\"number\" />\r\n                            </Box>\r\n                        )\r\n                    })}\r\n                \r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleAddItem}\r\n                        startIcon={<Icon>add</Icon>} >\r\n                            <Typography variant=\"button\">\r\n                                Add a new pair\r\n                            </Typography>\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleDeleteItem}\r\n                        startIcon={<Icon>delete</Icon>} >\r\n                            <Typography variant=\"button\">\r\n                                Delete last pair\r\n                            </Typography>\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\" \r\n                        color=\"primary\"\r\n                        onClick={handleTrainModel}\r\n                        startIcon={<Icon>scatter_plot</Icon>} >\r\n                        <Typography variant=\"button\">\r\n                            Train\r\n                        </Typography>\r\n                    </Button>\r\n                </Box>\r\n\r\n                <Box className=\"predict-controls\">\r\n                    <Typography variant=\"h2\">Predicting</Typography>\r\n                    <Input\r\n                        className=\"field element\"\r\n                        value={modelState.valueToPredict}\r\n                        name=\"valueToPredict\"\r\n                        onChange={handleModelChange}\r\n                        type=\"number\"\r\n                        placeholder=\"Enter an integer\" /><br />\r\n                    <Box className=\"element label-prediction\">\r\n                        {\r\n                            /* conditional rendering */\r\n                            modelState.loading ? \r\n                                <Loader\r\n                                className=\"loader\"\r\n                                type=\"Bars\"\r\n                                color=\"#00DE00\"\r\n                                height={32}\r\n                                width={32}\r\n                                />\r\n                            :    \r\n                                <Typography variant=\"h5\">\r\n                                    {modelState.predictedValue}\r\n                                </Typography>\r\n                        }\r\n                    </Box>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={handlePredict}\r\n                        disabled={!modelState.trained}>\r\n                        <Typography variant=\"button\">\r\n                            Predict\r\n                        </Typography>\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default LinearRegression","/* eslint-disable jsx-a11y/img-redundant-alt */\r\nimport React, { useState, useEffect } from 'react'\r\nimport Loader from 'react-loader-spinner'\r\nimport PropTypes from 'prop-types'\r\nimport Header from './Header'\r\n\r\nimport * as mn from '@tensorflow-models/mobilenet'\r\nimport * as tf from '@tensorflow/tfjs'\r\n\r\nimport { Box, Typography, Card, CardContent, Button, } from '@material-ui/core'\r\n\r\nimport './MobileNet.css'\r\n\r\n// Earlier, when we wanted to use hooks - include any state to it, \r\n// we had to transform the function componenent into class.\r\n// This is no longer necessary (since 16.8.0).\r\n// React Native supports them, as well (since 0.59).\r\n// You can still use the old solution, it is 100% bw compatible.\r\n// We can use these new hooks in functional components.\r\n\r\n// Functional Component or Stateless Component\r\n// (opposed to a Class Component or Stateful Component)\r\n// No \"render()\" used in these components.\r\n// (opposed to a Class Component, which must have it)\r\n// Use functional components as much as you can, because they are\r\n// easier to read, test, maintain.\r\nconst MobileNet = () => {\r\n\r\n    // Declare a new state variable called \"clsImage\".\r\n    // Before 2018, we would need to write a constructor here and then change the\r\n    // state via \"this.state.clsImage\".\r\n    //\r\n    // Now, we just use the new useState hook, that lets us add React state to\r\n    // function components.\r\n    //\r\n    // Why the square brackets? Array destructing syntax.\r\n    //\r\n    // We just pass an initial state to this function at its definition.\r\n    // \"clsImage\" is an argument, \"setClsImage\" is a function.\r\n    const [clsImage, setClsImage] = useState([])\r\n    const [clsVideo, setClsVideo] = useState([])\r\n    const [videoStream, setVideoStream] = useState(true)\r\n\r\n    \r\n    // You can think of the useEffect Hook as componentDidMount, \r\n    // componentDidUpdate, and componentWillUnmount combined.\r\n    //\r\n    // Hooks can be used to replicated lifecycle behavior.\r\n    //\r\n    // By default, useEffect runs after every render -\r\n    // \"things that happen after render\".\r\n    //\r\n    // The empty array ensures this hook will run only on an initial render,\r\n    // otherwise setUpForInterface() is called in loop.\r\n    // Alternatively, we can add there an argument, on which the Hook\r\n    // will be called again.\r\n    useEffect(() => {\r\n        setUpInterface()\r\n        return () => console.log('unmounted!')\r\n    }, [])\r\n    \r\n    // Component vars\r\n    // Don't know any better know where to put them (use them as \"attributes\")\r\n    // I don't think putting them into state would be a good idea...\r\n    let net\r\n    let webcam\r\n\r\n    // Load the MobileNet model and call the loadWebCam function.\r\n    const setUpInterface = () => {\r\n        // Create an scoped async function in the Hook\r\n        // Load the net\r\n        // Async/await is a syntax sugar above promises, making them easier to use.\r\n        // The word \"async\" in front of the function name means the function will always\r\n        // return a promise. Even non-promises are wrapped and returned as promises.\r\n        // The keyword \"await\" means that JS waits until the promise resolves and then \r\n        // returns its result.\r\n        // The code literally pauses at that line and does not continue further.\r\n        async function loadMobileNet() {\r\n            net = await mn.load()\r\n            console.log(\"Successfully loaded model!\")\r\n\r\n            loadWebCam()\r\n        }\r\n\r\n        loadMobileNet()\r\n    }\r\n\r\n    // Load the web cam\r\n    async function loadWebCam() {\r\n        const webcamElement = document.getElementById('webcam')    // const is block-scoped\r\n        webcam = await tf.data.webcam(webcamElement)\r\n        console.log(\"Webcam is loaded!\")\r\n\r\n        videoClassification(true)\r\n        classifyImage()\r\n    }\r\n\r\n    // Classify the image and save the results into the state\r\n    async function classifyImage() {\r\n        const imgEl = document.getElementById('mnimg')\r\n        const results = await net.classify(imgEl)\r\n        setClsImage(results)\r\n    }\r\n\r\n    // Video classification.\r\n    async function videoClassification() {\r\n        while(videoStream) {\r\n            const img = await webcam.capture()\r\n            const result = await net.classify(img)\r\n\r\n            // Just save the last classification.\r\n            // setClsVideo(result)\r\n            \r\n            // Save all classifications.\r\n            result.map(r => setClsVideo(clsVideo => [...clsVideo, r]))\r\n\r\n            // Dispose the tensor to release the memory.\r\n            img.dispose()\r\n\r\n            // Give some breathing room by waiting for the next \r\n            // animation frame to fire.\r\n            await sleep(3000)\r\n            await tf.nextFrame()\r\n        }\r\n    }\r\n\r\n    const sleep = ms => new Promise(res => setTimeout(res, ms))\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header name=\"Object Recognition\" />\r\n            <Box className=\"mobile-net\">\r\n                <Typography variant=\"h2\">MobileNet</Typography>\r\n                <Box className=\"video-classification\">\r\n                    <Typography variant=\"h3\">Video image classification</Typography>\r\n                    <video autoPlay playsInline muted id=\"webcam\" width=\"224\" height=\"224\"></video>\r\n                    <Box>\r\n                        {\r\n                            clsVideo.length ?\r\n                            <Box>\r\n                                <Typography variant=\"body1\">{clsVideo[clsVideo.length-1].className}</Typography>\r\n                                <Typography variant=\"body2\">\r\n                                    p: {clsVideo[clsVideo.length-1].probability.toFixed(2)}\r\n                                </Typography>\r\n                            </Box>\r\n                                :\r\n                            <Box className=\"wait-for-video\">\r\n                                <Loader\r\n                                className=\"loader\"\r\n                                type=\"Grid\"\r\n                                color=\"#00DE00\"\r\n                                height={156}\r\n                                width={156}\r\n                                />\r\n                                <Typography variant=\"body1\">Loading...</Typography>\r\n                            </Box>\r\n                        }\r\n                    </Box>\r\n                </Box>\r\n                <Box className=\"image-classification\">\r\n                    <Typography variant=\"h3\">Image classification</Typography>\r\n                    <img \r\n                        id='mnimg' \r\n                        src={process.env.PUBLIC_URL + '/images/MobileNetImage.jpg'} \r\n                        alt=\"MobileNet image\" />\r\n                    <Box>\r\n                    <Typography variant=\"h4\">Classification results</Typography>\r\n                        {\r\n                            clsImage.length ?\r\n                                // clsImage.map((val, index) => {\r\n                                //     return (\r\n                                //         <Box key={index} className=\"row\">\r\n                                //             <Box\r\n                                //                 className=\"field field-x column\"\r\n                                //                 name=\"className\"\r\n                                //                 data-index={index}>\r\n                                //                 {val.className}\r\n                                //             </Box>\r\n                                //             <ResultCard />\r\n                                //             <Box \r\n                                //                 className=\"field field-y column\"\r\n                                //                 value={val.probability}\r\n                                //                 name=\"probability\"\r\n                                //                 data-index={index}>\r\n                                //                 {val.probability.toFixed(2)}\r\n                                //             </Box>\r\n                                //         </Box>\r\n                                //     )\r\n                                // })\r\n                                clsImage.map((val, index) => <ResultCard key={index} val={val.className} probability={val.probability} />)\r\n                                :\r\n                            <Loader\r\n                            className=\"loader\"\r\n                            type=\"ThreeDots\"\r\n                            color=\"#00DE00\"\r\n                            height={32}\r\n                            width={32}\r\n                            />\r\n                        }\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default MobileNet\r\n\r\n\r\nconst ResultCard = ({val, probability, index}) => {\r\n\r\n    const [showProbability, setShowProbability] = useState(false)\r\n\r\n    const handleChangeButtonText = () => ( \r\n        showProbability ? \r\n            setShowProbability(false)\r\n            :\r\n            setShowProbability(true)\r\n    )\r\n\r\n    React.useEffect(() => {\r\n        console.log('show probability changed!')\r\n    }, [showProbability])\r\n\r\n    return (\r\n        <Card index={index}>\r\n            <CardContent>\r\n                <Typography variant=\"h5\">\r\n                    {val}\r\n                </Typography>\r\n                <Button\r\n                     variant=\"contained\" \r\n                     color=\"primary\"\r\n                     onClick={handleChangeButtonText}\r\n                >\r\n                    <Typography variant=\"button\">\r\n                        Toggle probability\r\n                    </Typography>\r\n                </Button>\r\n                {\r\n                    showProbability &&\r\n                    <Typography variant=\"subtitle1\">\r\n                        {probability}\r\n                    </Typography>\r\n                }\r\n            </CardContent>      \r\n        </Card>\r\n    )\r\n}\r\n\r\nResultCard.propTypes = {\r\n    val: PropTypes.string,\r\n    probability: PropTypes.number,\r\n    index: PropTypes.number\r\n}","import React, { useState } from 'react'\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\r\n\r\nimport { AppBar, Toolbar, Typography, IconButton, \r\n    Menu, MenuItem, ListItemIcon, ListItemText, } from '@material-ui/core'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport ImageIcon from '@material-ui/icons/Image'\r\nimport FunctionsIcon from '@material-ui/icons/Functions'\r\nimport InfoIcon from '@material-ui/icons/Info'\r\n\r\n// makeStyles is a hook generator.\r\n// Enables us to override styles.\r\n// This is particularly useful when styling nested elements in a component.\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    logo: {\r\n        color: '#fff',\r\n        fontWeight: '900',\r\n        backgroundColor: '#131313',\r\n        padding: '6px 12px',\r\n        textDecoration: 'none',\r\n        '&:hover': {\r\n            color: '#00FE00'\r\n        }\r\n    },\r\n    navRight: {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end',\r\n        width: '100vw',\r\n    },\r\n    item: {\r\n        padding: '16px 32px',\r\n    },\r\n    link: {\r\n        color: '#fff',\r\n        textDecoration: 'none',\r\n        letterSpacing: '1px',\r\n        '&:hover': {\r\n            color: '#00FE00'\r\n        }\r\n    },\r\n    menuButton: {\r\n        position: 'absolute',\r\n        right: '12px'\r\n    },\r\n    mobileItemLink: {\r\n        textDecoration: 'none'\r\n    }\r\n}))\r\n\r\nconst StyledMenu = withStyles({\r\n    paper: {\r\n      border: '1px solid #d3d4d5',\r\n    },\r\n  })((props) => (\r\n    <Menu\r\n      elevation={0}\r\n      getContentAnchorEl={null}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'center',\r\n      }}\r\n      transformOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'center',\r\n      }}\r\n      {...props}\r\n    />\r\n))\r\n\r\n// withStyles, the wrapped component accepts a classes prop,\r\n// it simply merges the class names provided with the style sheet.\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n    root: {\r\n      '&:focus': {  // onFocus selector\r\n        backgroundColor: theme.palette.primary.main,\r\n        '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n          color: theme.palette.common.white\r\n        },\r\n      },\r\n    },\r\n}))(MenuItem)\r\n\r\n\r\n// Use functional components over class components whenever possible.\r\n// They are simpler to read, shorter, easier to test...\r\nconst Navbar = () => {\r\n    const [anchorEl, setAnchorEl] = useState(null)\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const classes = useStyles() // using the Hook API\r\n    const desktopNavbar = useMediaQuery('(min-width:668px)')\r\n\r\n    // event handlers\r\n    const handleClick = event => {\r\n        setAnchorEl(event.currentTarget)\r\n        setIsOpen(true)\r\n    }\r\n    const handleClose = () => {\r\n        setAnchorEl(null)\r\n        setIsOpen(false)\r\n    }\r\n\r\n    return (\r\n        desktopNavbar ?\r\n            // desktop appbar\r\n            <div className={classes.root}>\r\n                <AppBar color=\"primary\" title=\"TensorFlow React JS App\" position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\">\r\n                            <Link to=\"/\" className={classes.logo}>TR</Link>\r\n                        </Typography>\r\n                        <div className={classes.navRight}>\r\n                            <Typography variant=\"h6\" className={classes.item}>\r\n                                <Link to=\"/\" className={classes.link}>Object Recognition</Link>\r\n                            </Typography>\r\n                            <Typography variant=\"h6\" className={classes.item}>\r\n                                <Link to=\"/linear-regression\" className={classes.link}>Linear Regression</Link>\r\n                            </Typography>\r\n                            <Typography variant=\"h6\" className={classes.item}>\r\n                                <Link to=\"/about\" className={classes.link}>About</Link>\r\n                            </Typography>\r\n                        </div>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n            :\r\n            // mobile appbar\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\">\r\n                            <Link to=\"/\" className={classes.logo}>TR</Link>\r\n                        </Typography>\r\n                        <IconButton className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={handleClick}>\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <StyledMenu\r\n                            id=\"customized-menu\"\r\n                            anchorEl={anchorEl}\r\n                            keepMounted\r\n                            open={isOpen}\r\n                            onClose={handleClose}\r\n                        >\r\n                            <Link to=\"/\" onClick={handleClose} className={classes.mobileItemLink}>\r\n                                <StyledMenuItem>\r\n                                    <ListItemIcon>\r\n                                        <ImageIcon fontSize=\"small\" />\r\n                                    </ListItemIcon>\r\n                                    <ListItemText primary=\"Object Recognition\" />\r\n                                </StyledMenuItem>\r\n                            </Link>\r\n                            <Link to=\"/linear-regression\" onClick={handleClose} className={classes.mobileItemLink}>\r\n                                <StyledMenuItem>\r\n                                    <ListItemIcon>\r\n                                        <FunctionsIcon fontSize=\"small\" />\r\n                                    </ListItemIcon>\r\n                                    <ListItemText primary=\"Linear Regression\" />\r\n                                </StyledMenuItem>\r\n                            </Link>\r\n                            <Link to=\"/about\" onClick={handleClose} className={classes.mobileItemLink}>\r\n                                <StyledMenuItem>\r\n                                    <ListItemIcon>\r\n                                        <InfoIcon fontSize=\"small\" />\r\n                                    </ListItemIcon>\r\n                                    <ListItemText primary=\"About\" />\r\n                                </StyledMenuItem>\r\n                            </Link>\r\n                        </StyledMenu>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\nimport Header from './Header'\r\n\r\nimport { Typography, Link } from '@material-ui/core'\r\n\r\nconst About = () => (\r\n    <React.Fragment>\r\n        <Header name=\"About\" />\r\n        <Typography variant=\"subtitle1\" color=\"secondary\">\r\n            This project was based on\r\n                <Link\r\n                href=\"https://www.dlighthouse.co/2020/02/creating-tensorflowjs-reactjs-js-app.html\"\r\n                color=\"primary\"> this tutorial\r\n                </Link>\r\n        </Typography>\r\n        <Typography variant=\"subtitle1\" color=\"secondary\">\r\n            My personal contribution was addition of all the neat functionality around and styles.\r\n        </Typography>\r\n    </React.Fragment>\r\n)\r\n\r\nexport default About","import React from 'react'\r\n\r\nimport LinearRegression from './components/LinearRegression'\r\nimport MobileNet from './components/MobileNet'\r\nimport Navbar from './components/Navbar'\r\nimport About from './components/About'\r\n\r\nimport { Box } from '@material-ui/core'\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\r\n\r\n\r\nconst App = () => (\r\n  <Box className=\"App\">\r\n      <Router>\r\n        <Navbar />\r\n        <Switch>\r\n            <Route path=\"/about\">\r\n                <About />\r\n            </Route>\r\n            <Route path=\"/linear-regression\">\r\n              <LinearRegression/>\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <MobileNet>\r\n                <p>Children of the net!</p>\r\n              </MobileNet>\r\n            </Route>\r\n        </Switch>\r\n      </Router>\r\n  </Box>\r\n)\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js` \r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister()\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nimport { CssBaseline } from '@material-ui/core'  // similar to normalize.css\r\n\r\n// React.StrictMode is a tool for highlighting potential problems in an application.\r\n// Like Fragment, StrictMode does not render any visible UI. It activates \r\n// additional checks and warnings for its descendants.\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <CssBaseline>\r\n      <App />\r\n    </CssBaseline>,\r\n  // </React.StrictMode>\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}