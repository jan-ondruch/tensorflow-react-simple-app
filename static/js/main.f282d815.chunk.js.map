{"version":3,"sources":["components/LinearRegression.js","components/MobileNet.js","App.js","serviceWorker.js","index.js"],"names":["LinearRegression","useState","x","y","valuePairsState","setValuePairsState","model","trained","predictedValue","loading","valueToPredict","modelState","setModelState","handleValuePairChange","e","updatedValuePairs","update","target","dataset","index","name","$set","parseInt","value","className","map","val","key","data-index","onChange","type","onClick","slice","length","xValues","yValues","forEach","push","tf","add","dense","units","inputShape","compile","loss","optimizer","xs","ys","fit","epochs","then","placeholder","color","height","width","predict","arraySync","disabled","MobileNet","clsResult","setClsResult","useEffect","console","log","setUpForInterface","net","a","mn","classifyNet","imgEl","document","getElementById","classify","r","loadMobileNet","id","src","process","alt","probability","App","Header","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f282d815.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport update from 'immutability-helper';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nimport './LinearRegression.css';\r\n\r\nconst LinearRegression = () => {\r\n    // Value pairs state\r\n    const [valuePairsState, setValuePairsState] = useState([\r\n        { x: -1, y: -3 },\r\n        { x: 0, y: -1},\r\n        { x: 1, y: 1},\r\n        { x: 2, y: 3},\r\n        { x: 3, y: 5},\r\n        { x: 4, y: 7},\r\n    ]);\r\n\r\n    // Define the model state\r\n    const [modelState, setModelState] = useState({\r\n        model: null,\r\n        trained: false,\r\n        predictedValue: 'Click on train!',\r\n        loading: false,\r\n        valueToPredict: 1,\r\n    });\r\n\r\n    // Event handlers\r\n    const handleValuePairChange = (e) => {\r\n        const updatedValuePairs = update(valuePairsState, {\r\n            [e.target.dataset.index]: {\r\n                [e.target.name]: { $set: parseInt(e.target.value) }\r\n            }\r\n        })\r\n\r\n        setValuePairsState(\r\n            updatedValuePairs\r\n        )\r\n    };\r\n\r\n    const handleAddItem = () => {\r\n        setValuePairsState([\r\n            ...valuePairsState,\r\n            { x: 1, y: 1 }\r\n        ]);\r\n    }\r\n\r\n    const handleDeleteItem = () => {\r\n        setValuePairsState([\r\n            ...valuePairsState.slice(0,valuePairsState.length-1)\r\n        ]);\r\n    }\r\n\r\n    const handleModelChange = (e) => setModelState({\r\n        ...modelState,\r\n        [e.target.name]: [parseInt(e.target.value)],\r\n    });\r\n\r\n    const handleTrainModel = () => {\r\n\r\n        // Change the loading state.\r\n        setModelState({\r\n            ...modelState,\r\n            loading: true\r\n        })\r\n\r\n        let xValues = [],\r\n            yValues = [];\r\n\r\n        valuePairsState.forEach((val, index) => {\r\n            xValues.push(val.x);\r\n            yValues.push(val.y);\r\n        });\r\n\r\n        // Define a model for linear regression.\r\n        const model = tf.sequential();\r\n        model.add(tf.layers.dense({ units: 1, inputShape: [1]}));\r\n\r\n        // Prepare the model for training: Specify the loss and the optimizer.\r\n        model.compile({ loss: 'meanSquaredError', optimizer: 'sgd' });\r\n        const xs = tf.tensor2d(xValues, [xValues.length, 1]);\r\n        const ys = tf.tensor2d(yValues, [yValues.length, 1]);\r\n\r\n        // Train the model using the data.\r\n        model.fit(xs, ys, { epochs: 250 }).then(() => {\r\n            setModelState({\r\n                ...modelState,\r\n                model: model,\r\n                trained: true,\r\n                predictedValue: 'Ready for making predictions',\r\n                loading: false,\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    const handlePredict = () => {\r\n        // Use the model to do inference on a data point the model has not seen before:\r\n        const predictedValue = modelState.model.predict(tf.tensor2d([modelState.valueToPredict], [1, 1]))\r\n            .arraySync()[0][0];\r\n\r\n        setModelState({\r\n            ...modelState,\r\n            predictedValue: predictedValue,\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"linear-regression\">\r\n            <div className=\"train-controls\">\r\n                <h2>Linear Regression</h2>\r\n                <h3 className=\"section\">Training Data (x,y) pairs</h3>\r\n                <div className=\"row labels\">\r\n                    <div className=\"field-label column\">X</div>\r\n                    <div className=\"field-label column\">Y</div>\r\n                </div>\r\n\r\n                {valuePairsState.map((val, index) => {\r\n                    return (\r\n                        <div key={index} className=\"row\">\r\n                            <input\r\n                                className=\"field field-x column\"\r\n                                value={val.x}\r\n                                name=\"x\"\r\n                                data-index={index}\r\n                                onChange={handleValuePairChange}\r\n                                type=\"number\" />\r\n                        \r\n                            <input \r\n                                className=\"field field-y column\"\r\n                                value={val.y}\r\n                                name=\"y\"\r\n                                data-index={index}\r\n                                onChange={handleValuePairChange}\r\n                                type=\"number\" />\r\n                        </div>\r\n                    );\r\n                })}\r\n            \r\n                <button\r\n                    className=\"button-add-example button--green\"\r\n                    onClick={handleAddItem}>\r\n                    Add a new pair\r\n                </button>\r\n                <button\r\n                    className=\"button-delete-example button--green\"\r\n                    onClick={handleDeleteItem}\r\n                    >\r\n                    Delete last pair\r\n                </button>\r\n                <button\r\n                    className=\"button-train button--green\"\r\n                    onClick={handleTrainModel}>\r\n                Train\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"predict-controls\">\r\n                <h2 className=\"section\">Predicting</h2>\r\n                <input\r\n                    className=\"field element\"\r\n                    value={modelState.valueToPredict}\r\n                    name=\"valueToPredict\"\r\n                    onChange={handleModelChange}\r\n                    type=\"number\"\r\n                    placeholder=\"Enter an integer\" /><br />\r\n                <div className=\"element label-prediction\">\r\n                    {\r\n                        /* conditional rendering */\r\n                        modelState.loading ? \r\n                            <Loader\r\n                            className=\"loader\"\r\n                            type=\"Bars\"\r\n                            color=\"#00DE00\"\r\n                            height={32}\r\n                            width={32}\r\n                            />\r\n                        :    \r\n                            <h3>{modelState.predictedValue}</h3>\r\n                    }\r\n                </div>\r\n                <button\r\n                    className=\"element button--green\"\r\n                    onClick={handlePredict}\r\n                    disabled={!modelState.trained}>\r\n                    Predict\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LinearRegression;","/* eslint-disable jsx-a11y/img-redundant-alt */\r\nimport React, { useState, useEffect } from 'react';\r\nimport * as mn from '@tensorflow-models/mobilenet';\r\n\r\nimport './MobileNet.css';\r\n\r\n// Earlier, when we wanted to use hooks - include any state to it, \r\n// we had to transform the function componenent into class.\r\n// This is no longer necessary (since 16.8.0).\r\n// React Native supports them, as well (since 0.59).\r\n// You can still use the old solution, it is 100% bw compatible.\r\n\r\nconst MobileNet = () => {\r\n\r\n    // Declare a new state variable called \"clsResult\".\r\n    // Before 2018, we would need to write a constructor here and then change the\r\n    // state via \"this.state.clsResult\".\r\n    //\r\n    // Now, we just use the new useState hook, that lets us add React state to\r\n    // function components.\r\n    //\r\n    // Why the square brackets? Array destructing syntax.\r\n    //\r\n    // We just pass an initial state to this function at its definition.\r\n    // \"clsResult\" is an argument, \"setClsResult\" is a function.\r\n    const [clsResult, setClsResult] = useState([]);\r\n\r\n    // You can think of the useEffect Hook as componentDidMount, \r\n    // componentDidUpdate, and componentWillUnmount combined.\r\n    //\r\n    // By default, useEffect runs after every render -\r\n    // \"things that happen after render\".\r\n    //\r\n    // The empty array ensures this hook will run only on an initial render,\r\n    // otherwise setUpForInterface() is called in loop.\r\n    // Alternatively, we can add there an argument, on which the Hook\r\n    // will be called again.\r\n    useEffect(() => {\r\n        console.log('useEffect here!');\r\n        setUpForInterface();\r\n    }, []);\r\n\r\n    // Load the MobileNet model and make a prediction through the model on an image\r\n    const setUpForInterface = () => {\r\n        \r\n        console.log(\"Loading mobilenet...\");\r\n        let net;\r\n\r\n        // Create an scoped async function in the Hook\r\n        // Load the net\r\n        async function loadMobileNet() {\r\n            net = await mn.load();\r\n            console.log(\"Successfully loaded model!\");\r\n            classifyNet();\r\n        }\r\n        loadMobileNet();\r\n\r\n        // Classify the image and save the results into the state\r\n        async function classifyNet() {\r\n            const imgEl = document.getElementById('mnimg');\r\n            const results = await net.classify(imgEl);\r\n            results.map(r => setClsResult(clsResult => [...clsResult, r]));\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"mobile-net\">\r\n            <div>\r\n                <h2>MobileNet</h2>\r\n                <img \r\n                    id='mnimg' \r\n                    src={process.env.PUBLIC_URL + '/images/MobileNetImage.jpg'} \r\n                    alt=\"MobileNet image\" />\r\n                <h4>Classification result</h4>\r\n                <div>\r\n                    {\r\n                        clsResult.length ?\r\n                            clsResult.map((val, index) => {\r\n                                return (\r\n                                    <div key={index} className=\"row\">\r\n                                        <input\r\n                                            className=\"field field-x column\"\r\n                                            value={val.className}\r\n                                            name=\"className\"\r\n                                            data-index={index} />\r\n                                    \r\n                                        <input \r\n                                            className=\"field field-y column\"\r\n                                            value={val.probability}\r\n                                            name=\"probability\"\r\n                                            data-index={index} />\r\n                                    </div>\r\n                                );\r\n                            })\r\n                            :\r\n                        <p>Classifying...</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MobileNet;","import React from 'react';\r\n\r\nimport LinearRegression from './components/LinearRegression';\r\nimport MobileNet from './components/MobileNet';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <LinearRegression/>\r\n      <hr></hr>\r\n      <MobileNet />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\nconst Header = () => (\r\n  <div className=\"Header\">\r\n    <h1>\r\n        TensorFlow React JS App\r\n      </h1>\r\n      <p>\r\n        This project was based on <a href=\"https://www.dlighthouse.co/2020/02/creating-tensorflowjs-reactjs-js-app.html\">this tutorial</a>\r\n      </p>\r\n      <p>\r\n        My personal contribution was an addition of some neat functionality as well as of my own styles.\r\n      </p>\r\n  </div>\r\n);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}